"""
PartType0: Gas
PartType1: Grains(Epstein/Stokes and charged particles)
PartType2: Grains(Epstein/Stokes) / Star from the IC
PartType3: Super-particles
PartType4: Stars / Star from gas
PartType5: Black holes or Collisioness particles
"""

function _read_gizmo_base!(data :: PhantomRevealerDataFrame, PartGroup :: HDF5.Group; record_columns :: Set{String} = Set{String}())
    Npart = data.params["NumPartType"]
    pid_src = read(PartGroup, "ParticleIDs")
    @assert length(pid_src) == Npart
    map!(Int64, data[!, :ParticleIDs], pid_src)  

    coordinate = read(PartGroup, "Coordinates")
    @assert size(coordinate, 1) == 3
    data[!, :x] = @view coordinate[1, :]
    data[!, :y] = @view coordinate[2, :]
    data[!, :z] = @view coordinate[3, :]

    velocity = read(PartGroup, "Velocities")
    @assert size(velocity, 1) == 3
    data[!, :vx] = @view velocity[1, :]
    data[!, :vy] = @view velocity[2, :]
    data[!, :vz] = @view velocity[3, :]

    if haskey(PartGroup, "Masses")
        data[!, :m] = read(PartGroup, "Masses")
        data.params["TotalMassType"] = sum(data[!, :m])
    else
        @assert haskey(data.params, "MassPerParticleType") "Missing MassPerParticleType and no Masses dataset."
        mpp = data.params["MassPerParticleType"]
        data[!, :m] = fill(mpp, Npart)
        data.params["TotalMassType"] = mpp * Npart
    end
    
    if data.params["PartType"] == "PartType0"
        data[!, :rho] = read(PartGroup, "Density")
        data[!, :h] = read(PartGroup, "SmoothingLength")
    end    
    data[!, :dt] = read(PartGroup, "TimeStep")

    metadata!(data.dfdata, "coord_parent", coordinate; style = :note)
    metadata!(data.dfdata, "vel_parent",   velocity;   style = :note)

    push!(record_columns, "ParticleIDs", "Coordinates", "Velocities", "Masses", "Density", "SmoothingLength", "TimeStep")
end

function _read_gizmo_dust!(data :: PhantomRevealerDataFrame, PartGroup :: HDF5.Group; record_columns :: Set{String} = Set{String}())
    if data.params["PartType"] == "PartType0"
        data[!, :mC] = read(PartGroup, "CarbonDustMass")
        data[!, :mSi] = read(PartGroup, "SilicateDustMass")
        push!(record_columns, "CarbonDustMass", "SilicateDustMass")
    end
end

function _read_gizmo_ChemicalAbundances!(data :: PhantomRevealerDataFrame, PartGroup :: HDF5.Group; record_columns :: Set{String} = Set{String}())
    if data.params["PartType"] == "PartType0"
        χ = read(PartGroup, "ChemicalAbundancesSG")
        data[!,"χH2"] = @view χ[1,:]            # Defined as nH2/nH
        data[!,"χH+"] = @view χ[2,:]            # Defined as nH+/nH
        data[!,"χCO"] = @view χ[3,:]            # Defined as nCO/nH
        metadata!(data.dfdata, "Chemical_parent", χ; style = :note)
        push!(record_columns, "ChemicalAbundancesSG")
    end
end

function _read_gizmo_ThermalDynamics!(data :: PhantomRevealerDataFrame, PartGroup :: HDF5.Group; record_columns :: Set{String} = Set{String}())
    if data.params["PartType"] == "PartType0"
        data[!, :"InternalEnergy"] = read(PartGroup, "InternalEnergy")
        push!(record_columns, "InternalEnergy")
    end
end

"""
    read_gizmo(filename::String;
               Full_data :: Bool = true,
               ThermalDynamics :: Bool = true,
               dust :: Bool = true,
               ChemicalAbundances :: Bool = true,
               extra_columns :: AbstractVector{String} = String[]) :: Vector{PhantomRevealerDataFrame}
Reading the HDF5-format dumpfiles generated by GIZMO to a list of `PhantomRevealerDataFrame`

# Parameters 
- `filename::String`: Name of the file to be loaded.

# Keyword Arguments
- `Full_data`: When `true`, ingest every remaining dataset not already handled by the readers
  above (with automatic splitting/binding as described).
- `ThermalDynamics`: Read thermal/energy-related columns where available (gas only).
- `dust`: Read dust-related columns where available (gas only).
- `ChemicalAbundances`: Read chemical-abundance fractions where available (gas only).

# Returns
- `PhantomRevealerDataFrame` or `Vector`: PhantomRevealerDataFrame or Array of PhantomRevealerDataFrames
"""
function read_gizmo(filename::String;
    Full_data :: Bool = true,
    ThermalDynamics :: Bool = true,
    dust :: Bool = true,
    ChemicalAbundances :: Bool = true,
    extra_columns :: AbstractVector{String} = String[]) :: Vector{PhantomRevealerDataFrame}
    # Get general header
    Header = h5readattr(filename, "Header")
    Header["udist"] = 3.085678e21    # kpc --> cm
    Header["umass"] = 1.989e43       # 10^10 M⊙ --> g
    Header["utime"] = 3.0842208e16   # 0.978 Gyr --> s
    Header["uv"] = 1.0e5             # km/s --> cm/s
    Header["umagfd"] = 1.0           # Gauss --> Gauss

    # Get the number of particles for each type
    NpartTypes = map(Int64, Header["NumPart_ThisFile"])

    # Allocating an empty vector for storage result
    prdf_list = PhantomRevealerDataFrame[]
    for (i, npart) in enumerate(NpartTypes)
        if npart == 0
            continue
        end

        # Get specific header configuration
        group_key = "PartType$(i - 1)"          # PartType{0..N}
        SpecificHeader = copy(Header)           
        SpecificHeader["PartType"] = group_key
        if haskey(SpecificHeader, "NumPart_ThisFile")
            SpecificHeader["NumPartType"] = npart
        end
        if haskey(SpecificHeader, "MassTable")
            mpp = SpecificHeader["MassTable"][i]
            SpecificHeader["MassPerParticleType"] = mpp
            SpecificHeader["TotalMassType"]        = mpp * npart
        end
        for k in ("NumPart_Total_HighWord", "NumPart_Total", "NumPart_ThisFile", "MassTable")
            haskey(SpecificHeader, k) && delete!(SpecificHeader, k)
        end

        # Generate empty PhantomRevealerDataFrame
        prdf = PhantomRevealerDataFrame(DataFrame(ParticleIDs = zeros(Int64, SpecificHeader["NumPartType"])), SpecificHeader)

        # Push to result array
        push!(prdf_list, prdf)
    end
    ignore_column = Set{String}()

    # Open files
    h5open(filename, "r") do f
        empty!(ignore_column)
        for i in eachindex(prdf_list)
            prdf = prdf_list[i]
            group_key = prdf.params["PartType"]
            PartGroup = f[group_key]

            # Read basic SPH data
            _read_gizmo_base!(prdf, PartGroup, record_columns = ignore_column)
            
            # Read ThermalDynamics-related columns
            if Full_data || ThermalDynamics
                _read_gizmo_ThermalDynamics!(prdf, PartGroup, record_columns = ignore_column)
            end

            # Read Dust-related columns
            if Full_data || dust
                _read_gizmo_dust!(prdf, PartGroup, record_columns = ignore_column)
            end

            # Read ChemicalAbundances-related columns
            if Full_data || ChemicalAbundances
                _read_gizmo_ChemicalAbundances!(prdf, PartGroup, record_columns = ignore_column)
            end

            # Get other columns
            if Full_data
                for dict_key in collect(keys(PartGroup))
                    if dict_key in ignore_column
                        continue
                    end

                    data = read(PartGroup, dict_key)
                    size_data = size(data)

                    if length(size_data) == 1
                        prdf[!, dict_key] = data
                    elseif length(size_data) == 2
                        num_rows = size_data[1]
                        dkeys = [dict_key * "_$n" for n in 1:num_rows]
                        for k in 1:num_rows
                            prdf[!, dkeys[k]] = data[k, :]
                        end
                    end
                end
            elseif !isempty(extra_columns)
                for column in extra_columns
                    if !(column in ignore_column)
                        if haskey(PartGroup, column)
                            A = read(PartGroup, column)            # A :: AbstractArray
                            if ndims(A) == 1
                                prdf[!, column] = A
                            elseif ndims(A) == 2
                                K, N = size(A)
                                for k in 1:K
                                    prdf[!, string(column, "_", k)] = @view A[k, :]   # SubArray{T,1}
                                end
                            else
                                @warn "Skip $column: unsupported ndims=$(ndims(A))"
                            end  
                        end
                    end   
                end
            end
        end
    end
    return prdf_list
end